{
  "contestId": 2061,
  "index": "E",
  "name": "Kevin and And",
  "rating": 2000,
  "tags": [
    "implementation"
  ],
  "statement": "Kevin has an integer sequence $$$a$$$ of length $$$n$$$. At the same time, Kevin has $$$m$$$ types of magic, where the $$$i$$$-th type of magic can be represented by an integer $$$b_i$$$. Kevin can perform at most $$$k$$$ (possibly zero) magic operations. In each operation, Kevin can do the following: Choose two indices $$$i$$$ ($$$1\\leq i\\leq n$$$) and $$$j$$$ ($$$1\\leq j\\leq m$$$), and then update $$$a_i$$$ to $$$a_i\\ \\&\\ b_j$$$. Here, $$$\\&$$$ denotes the bitwise AND operation . Find the minimum possible sum of all numbers in the sequence $$$a$$$ after performing at most $$$k$$$ operations.",
  "inputFormat": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). The description of the test cases follows. The first line of each test case contains three integers $$$n, m, k$$$ ($$$1\\leq n \\leq 10^5$$$, $$$1\\leq m \\leq 10$$$, $$$0\\leq k\\leq nm$$$) — the length of $$$a$$$, the number of types of magic, and the maximum number of operations. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0\\leq a_i < 2^{30}$$$). The third line contains $$$m$$$ integers $$$b_1, b_2, \\ldots, b_m$$$ ($$$0\\leq b_i < 2^{30}$$$). It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
  "outputFormat": "For each test case, output one integer — the minimum possible sum of all numbers in the sequence $$$a$$$ after performing at most $$$k$$$ operations.",
  "sampleTests": [
    {
      "input": "5\n1 3 2\n7\n5 6 3\n2 3 2\n5 6\n5 6 3\n10 2 5\n3 1 4 1 5 9 2 6 5 3\n7 8\n5 1 0\n1073741823 1073741823 1073741823 1073741823 1073741823\n1073741823\n1 1 0\n0\n0",
      "output": "1\n3\n11\n5368709115\n0"
    }
  ],
  "timeLimit": 2000,
  "memoryLimit": 512,
  "sourceUrl": "https://codeforces.com/problemset/problem/2061/E",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}