{
  "contestId": 1761,
  "index": "B",
  "name": "Elimination of a Ring",
  "rating": 1000,
  "tags": [
    "implementation"
  ],
  "statement": "Define a cyclic sequence of size $$$n$$$ as an array $$$s$$$ of length $$$n$$$, in which $$$s_n$$$ is adjacent to $$$s_1$$$. Muxii has a ring represented by a cyclic sequence $$$a$$$ of size $$$n$$$. However, the ring itself hates equal adjacent elements. So if two adjacent elements in the sequence are equal at any time, one of them will be erased immediately . The sequence doesn't contain equal adjacent elements initially. Muxii can perform the following operation until the sequence becomes empty: Choose an element in $$$a$$$ and erase it. For example, if ring is $$$[1, 2, 4, 2, 3, 2]$$$, and Muxii erases element $$$4$$$, then ring would erase one of the elements equal to $$$2$$$, and the ring will become $$$[1, 2, 3, 2]$$$. Muxii wants to find the maximum number of operations he could perform. Note that in a ring of size $$$1$$$, its only element isn't considered adjacent to itself (so it's not immediately erased).",
  "inputFormat": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1\\leq t\\leq 100$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1\\leq n\\leq 100$$$) — the size of the cyclic sequence. The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$1\\leq a_i\\leq n$$$) — the sequence itself. It's guaranteed that $$$a_i\\ne a_{i+1}$$$ for $$$1\\leq i<n$$$. It's guaranteed that $$$a_n\\ne a_1$$$ when $$$n>1$$$.",
  "outputFormat": "For each test case, output a single integer — the maximum number of operations Muxii can perform.",
  "sampleTests": [
    {
      "input": "3\n4\n1 2 3 2\n4\n1 2 1 2\n1\n1",
      "output": "4\n3\n1"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1761/B",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}