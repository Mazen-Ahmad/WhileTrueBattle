{
  "contestId": 2057,
  "index": "C",
  "name": "Trip to the Olympiad",
  "rating": 1500,
  "tags": [
    "implementation"
  ],
  "statement": "In the upcoming year, there will be many team olympiads, so the teachers of \"T-generation\" need to assemble a team of three pupils to participate in them. Any three pupils will show a worthy result in any team olympiad. But winning the olympiad is only half the battle; first, you need to get there... Each pupil has an independence level, expressed as an integer. In \"T-generation\", there is exactly one student with each independence levels from $$$l$$$ to $$$r$$$, inclusive. For a team of three pupils with independence levels $$$a$$$, $$$b$$$, and $$$c$$$, the value of their team independence is equal to $$$(a \\oplus b) + (b \\oplus c) + (a \\oplus c)$$$, where $$$\\oplus$$$ denotes the bitwise XOR operation . Your task is to choose any trio of students with the maximum possible team independence.",
  "inputFormat": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. The description of the test cases follows. The first line of each test case set contains two integers $$$l$$$ and $$$r$$$ ($$$0 \\le l, r < 2^{30}$$$, $$$r - l > 1$$$) — the minimum and maximum independence levels of the students.",
  "outputFormat": "For each test case set, output three pairwise distinct integers $$$a, b$$$, and $$$c$$$, such that $$$l \\le a, b, c \\le r$$$ and the value of the expression $$$(a \\oplus b) + (b \\oplus c) + (a \\oplus c)$$$ is maximized. If there are multiple triples with the maximum value, any of them can be output.",
  "sampleTests": [
    {
      "input": "8\n0 2\n0 8\n1 3\n6 22\n128 137\n69 98\n115 127\n0 1073741823",
      "output": "1 2 0\n8 7 1\n2 1 3\n7 16 11\n134 132 137\n98 85 76\n123 121 118\n965321865 375544086 12551794"
    }
  ],
  "timeLimit": 2000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/2057/C",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}