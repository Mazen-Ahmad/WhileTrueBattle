{
  "contestId": 2127,
  "index": "H",
  "name": "23 Rises Again",
  "rating": null,
  "tags": [
    "implementation"
  ],
  "statement": "Kiarash is picking strawberries to take home... A graph is called candy if and only if the degree of every vertex in it is at most $$$2$$$. You are given a simple, undirected, and connected graph $$$G$$$ of $$$n\\le 30$$$ vertices, with a special property: each vertex belongs to at most $$$5$$$ simple cycles$$$^{\\text{∗}}$$$ . What is the maximum number of edges among all subgraphs$$$^{\\text{†}}$$$ of $$$G$$$ that are candy ? $$$^{\\text{∗}}$$$A simple cycle is a connected subgraph such that each vertex has a degree of exactly $$$2$$$ $$$^{\\text{†}}$$$A subgraph of $$$G$$$ is a graph whose vertices and edges are subsets of $$$G$$$.",
  "inputFormat": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 50$$$). The description of the test cases follows. The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$3 \\leq n \\leq 30$$$, $$$n-1 \\leq m \\leq \\frac{n(n-1)}{2}$$$) — the number of vertices and the number of edges. Then $$$m$$$ lines follow, the $$$i$$$-th line containing two integers $$$u$$$ and $$$v$$$ ($$$1 \\leq u, v \\leq n$$$) — the two vertices that the $$$i$$$-th edge connects. It is guaranteed that the given graph is simple and connected, and each vertex belongs to at most $$$5$$$ simple cycles. It is guaranteed that the sum of $$$n^2$$$ over all test cases does not exceed $$$900$$$.",
  "outputFormat": "For each test case, output a single integer — the maximum number of edges among all subgraphs that are candy graphs .",
  "sampleTests": [
    {
      "input": "3\n4 4\n1 2\n1 3\n2 3\n3 4\n7 10\n1 2\n1 3\n1 4\n2 4\n3 4\n4 5\n4 6\n5 6\n5 7\n6 7\n9 10\n1 2\n1 3\n3 4\n3 7\n4 5\n4 6\n5 6\n7 8\n7 9\n8 9",
      "output": "3\n7\n8"
    }
  ],
  "timeLimit": 5000,
  "memoryLimit": 1024,
  "sourceUrl": "https://codeforces.com/problemset/problem/2127/H",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}