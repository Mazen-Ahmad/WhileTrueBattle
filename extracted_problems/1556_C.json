{
  "contestId": 1556,
  "index": "C",
  "name": "Compressed Bracket Sequence",
  "rating": 1800,
  "tags": [
    "implementation"
  ],
  "statement": "William has a favorite bracket sequence. Since his favorite sequence is quite big he provided it to you as a sequence of positive integers $$$c_1, c_2, \\dots, c_n$$$ where $$$c_i$$$ is the number of consecutive brackets \" ( \" if $$$i$$$ is an odd number or the number of consecutive brackets \" ) \" if $$$i$$$ is an even number. For example for a bracket sequence \" ((())())) \" a corresponding sequence of numbers is $$$[3, 2, 1, 3]$$$. You need to find the total number of continuous subsequences (subsegments) $$$[l, r]$$$ ($$$l \\le r$$$) of the original bracket sequence, which are regular bracket sequences. A bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters \" + \" and \" 1 \" into this sequence. For example, sequences \" (())() \", \" () \" and \" (()(())) \" are regular, while \" )( \", \" (() \" and \" (()))( \" are not.",
  "inputFormat": "The first line contains a single integer $$$n$$$ $$$(1 \\le n \\le 1000)$$$, the size of the compressed sequence. The second line contains a sequence of integers $$$c_1, c_2, \\dots, c_n$$$ $$$(1 \\le c_i \\le 10^9)$$$, the compressed sequence.",
  "outputFormat": "Output a single integer â€” the total number of subsegments of the original bracket sequence, which are regular bracket sequences. It can be proved that the answer fits in the signed 64-bit integer data type.",
  "sampleTests": [
    {
      "input": "5\n4 1 2 3 1",
      "output": "5"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1556/C",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}