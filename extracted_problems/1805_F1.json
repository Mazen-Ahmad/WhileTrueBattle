{
  "contestId": 1805,
  "index": "F1",
  "name": "Survival of the Weakest (easy version)",
  "rating": 2600,
  "tags": [
    "implementation"
  ],
  "statement": "This is the easy version of the problem. It differs from the hard one only in constraints on $$$n$$$. You can make hacks only if you lock both versions. Let $$$a_1, a_2, \\ldots, a_n$$$ be an array of non-negative integers. Let $$$F(a_1, a_2, \\ldots, a_n)$$$ be the sorted in the non-decreasing order array of $$$n - 1$$$ smallest numbers of the form $$$a_i + a_j$$$, where $$$1 \\le i < j \\le n$$$. In other words, $$$F(a_1, a_2, \\ldots, a_n)$$$ is the sorted in the non-decreasing order array of $$$n - 1$$$ smallest sums of all possible pairs of elements of the array $$$a_1, a_2, \\ldots, a_n$$$. For example, $$$F(1, 2, 5, 7) = [1 + 2, 1 + 5, 2 + 5] = [3, 6, 7]$$$. You are given an array of non-negative integers $$$a_1, a_2, \\ldots, a_n$$$. Determine the single element of the array $$$\\underbrace{F(F(F\\ldots F}_{n-1}(a_1, a_2, \\ldots, a_n)\\ldots))$$$. Since the answer can be quite large, output it modulo $$$10^9+7$$$.",
  "inputFormat": "The first line contains one integer $$$n$$$ ($$$2 \\le n \\le 3000$$$) — the initial length of the array. The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$) — the array elements.",
  "outputFormat": "Output a single number — the answer modulo $$$10^9 + 7$$$.",
  "sampleTests": [
    {
      "input": "5\n1 2 4 5 6",
      "output": "34"
    }
  ],
  "timeLimit": 3000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1805/F1",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}