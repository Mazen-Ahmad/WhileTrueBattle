{
  "contestId": 1497,
  "index": "C2",
  "name": "k-LCM (hard version)",
  "rating": 1600,
  "tags": [
    "implementation"
  ],
  "statement": "It is the hard version of the problem. The only difference is that in this version $$$3 \\le k \\le n$$$. You are given a positive integer $$$n$$$. Find $$$k$$$ positive integers $$$a_1, a_2, \\ldots, a_k$$$, such that: $$$a_1 + a_2 + \\ldots + a_k = n$$$ $$$LCM(a_1, a_2, \\ldots, a_k) \\le \\frac{n}{2}$$$ Here $$$LCM$$$ is the least common multiple of numbers $$$a_1, a_2, \\ldots, a_k$$$. We can show that for given constraints the answer always exists.",
  "inputFormat": "The first line contains a single integer $$$t$$$ $$$(1 \\le t \\le 10^4)$$$ â€” the number of test cases. The only line of each test case contains two integers $$$n$$$, $$$k$$$ ($$$3 \\le n \\le 10^9$$$, $$$3 \\le k \\le n$$$). It is guaranteed that the sum of $$$k$$$ over all test cases does not exceed $$$10^5$$$.",
  "outputFormat": "For each test case print $$$k$$$ positive integers $$$a_1, a_2, \\ldots, a_k$$$, for which all conditions are satisfied.",
  "sampleTests": [
    {
      "input": "2\n6 4\n9 5",
      "output": "1 2 2 1 \n1 3 3 1 1"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1497/C2",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}