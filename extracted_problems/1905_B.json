{
  "contestId": 1905,
  "index": "B",
  "name": "Begginer's Zelda",
  "rating": 1100,
  "tags": [
    "implementation"
  ],
  "statement": "You are given a tree$$$^{\\dagger}$$$. In one zelda-operation you can do follows: Choose two vertices of the tree $$$u$$$ and $$$v$$$; Compress all the vertices on the path from $$$u$$$ to $$$v$$$ into one vertex. In other words, all the vertices on path from $$$u$$$ to $$$v$$$ will be erased from the tree, a new vertex $$$w$$$ will be created. Then every vertex $$$s$$$ that had an edge to some vertex on the path from $$$u$$$ to $$$v$$$ will have an edge to the vertex $$$w$$$. Illustration of a zelda-operation performed for vertices $$$1$$$ and $$$5$$$. Determine the minimum number of zelda-operations required for the tree to have only one vertex. $$$^{\\dagger}$$$A tree is a connected acyclic undirected graph.",
  "inputFormat": "Each test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$) — the number of vertices. $$$i$$$-th of the next $$$n − 1$$$ lines contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \\le u_i, v_i \\le n, u_i \\ne v_i$$$) — the numbers of vertices connected by the $$$i$$$-th edge. It is guaranteed that the given edges form a tree. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
  "outputFormat": "For each test case, output a single integer — the minimum number of zelda-operations required for the tree to have only one vertex.",
  "sampleTests": [
    {
      "input": "4\n4\n1 2\n1 3\n3 4\n9\n3 1\n3 5\n3 2\n5 6\n6 7\n7 8\n7 9\n6 4\n7\n1 2\n1 3\n2 4\n4 5\n3 6\n2 7\n6\n1 2\n1 3\n1 4\n4 5\n2 6",
      "output": "1\n3\n2\n2"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1905/B",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}