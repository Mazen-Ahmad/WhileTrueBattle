{
  "contestId": 1789,
  "index": "B",
  "name": "Serval and Inversion Magic",
  "rating": 800,
  "tags": [
    "implementation"
  ],
  "statement": "Serval has a string $$$s$$$ that only consists of 0 and 1 of length $$$n$$$. The $$$i$$$-th character of $$$s$$$ is denoted as $$$s_i$$$, where $$$1\\leq i\\leq n$$$. Serval can perform the following operation called Inversion Magic on the string $$$s$$$: Choose an segment $$$[l, r]$$$ ($$$1\\leq l\\leq r\\leq n$$$). For $$$l\\leq i\\leq r$$$, change $$$s_i$$$ into 1 if $$$s_i$$$ is 0 , and change $$$s_i$$$ into 0 if $$$s_i$$$ is 1 . For example, let $$$s$$$ be 010100 and the segment $$$[2,5]$$$ is chosen. The string $$$s$$$ will be 001010 after performing the Inversion Magic. Serval wants to make $$$s$$$ a palindrome after performing Inversion Magic exactly once . Help him to determine whether it is possible. A string is a palindrome iff it reads the same backwards as forwards. For example, 010010 is a palindrome but 10111 is not.",
  "inputFormat": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1\\leq t\\leq 10^4$$$). The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$2\\leq n\\leq 10^5$$$) â€” the length of string $$$s$$$. The second line of each test case contains a binary string $$$s$$$ of length $$$n$$$. Only characters 0 and 1 can appear in $$$s$$$. It's guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.",
  "outputFormat": "For each test case, print Yes if $$$s$$$ can be a palindrome after performing Inversion Magic exactly once, and print No if not. You can output Yes and No in any case (for example, strings yEs , yes , Yes and YES will be recognized as a positive response).",
  "sampleTests": [
    {
      "input": "3\n4\n1001\n5\n10010\n7\n0111011",
      "output": "Yes\nYes\nNo"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1789/B",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}