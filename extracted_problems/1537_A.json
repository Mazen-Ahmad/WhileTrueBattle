{
  "contestId": 1537,
  "index": "A",
  "name": "Arithmetic Array",
  "rating": 800,
  "tags": [
    "implementation"
  ],
  "statement": "An array $$$b$$$ of length $$$k$$$ is called good if its arithmetic mean is equal to $$$1$$$. More formally, if $$$$$$\\frac{b_1 + \\cdots + b_k}{k}=1.$$$$$$ Note that the value $$$\\frac{b_1+\\cdots+b_k}{k}$$$ is not rounded up or down. For example, the array $$$[1,1,1,2]$$$ has an arithmetic mean of $$$1.25$$$, which is not equal to $$$1$$$. You are given an integer array $$$a$$$ of length $$$n$$$. In an operation, you can append a non-negative integer to the end of the array. What's the minimum number of operations required to make the array good? We have a proof that it is always possible with finitely many operations.",
  "inputFormat": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. Then $$$t$$$ test cases follow. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 50$$$) — the length of the initial array $$$a$$$. The second line of each test case contains $$$n$$$ integers $$$a_1,\\ldots,a_n$$$ ($$$-10^4\\leq a_i \\leq 10^4$$$), the elements of the array.",
  "outputFormat": "For each test case, output a single integer — the minimum number of non-negative integers you have to append to the array so that the arithmetic mean of the array will be exactly $$$1$$$.",
  "sampleTests": [
    {
      "input": "4\n3\n1 1 1\n2\n1 2\n4\n8 4 6 2\n1\n-2",
      "output": "0\n1\n16\n1"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1537/A",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}