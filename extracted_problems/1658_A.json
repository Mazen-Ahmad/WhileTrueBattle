{
  "contestId": 1658,
  "index": "A",
  "name": "Marin and Photoshoot",
  "rating": 800,
  "tags": [
    "implementation"
  ],
  "statement": "Today, Marin is at a cosplay exhibition and is preparing for a group photoshoot! For the group picture, the cosplayers form a horizontal line. A group picture is considered beautiful if for every contiguous segment of at least $$$2$$$ cosplayers, the number of males does not exceed the number of females (obviously). Currently, the line has $$$n$$$ cosplayers which can be described by a binary string $$$s$$$. The $$$i$$$-th cosplayer is male if $$$s_i = 0$$$ and female if $$$s_i = 1$$$. To ensure that the line is beautiful , you can invite some additional cosplayers (possibly zero) to join the line at any position. You can't remove any cosplayer from the line. Marin wants to know the minimum number of cosplayers you need to invite so that the group picture of all the cosplayers is beautiful . She can't do this on her own, so she's asking you for help. Can you help her?",
  "inputFormat": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^3$$$) — the number of test cases. The first line of each test case contains a positive integer $$$n$$$ ($$$1 \\leq n \\leq 100$$$) — the number of cosplayers in the initial line. The second line of each test case contains a binary string $$$s$$$ of length $$$n$$$ — describing the cosplayers already in line. Each character of the string is either 0 describing a male, or 1 describing a female. Note that there is no limit on the sum of $$$n$$$.",
  "outputFormat": "For each test case, print the minimum number of cosplayers you need to invite so that the group picture of all the cosplayers is beautiful .",
  "sampleTests": [
    {
      "input": "9\n3\n000\n3\n001\n3\n010\n3\n011\n3\n100\n3\n101\n3\n110\n3\n111\n19\n1010110000100000101",
      "output": "4\n2\n1\n0\n2\n0\n0\n0\n17"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1658/A",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}