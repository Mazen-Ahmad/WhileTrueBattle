{
  "contestId": 1761,
  "index": "E",
  "name": "Make It Connected",
  "rating": 2400,
  "tags": [
    "implementation"
  ],
  "statement": "You are given a simple undirected graph consisting of $$$n$$$ vertices. The graph doesn't contain self-loops, there is at most one edge between each pair of vertices. Your task is simple: make the graph connected. You can do the following operation any number of times (possibly zero): Choose a vertex $$$u$$$ arbitrarily. For each vertex $$$v$$$ satisfying $$$v\\ne u$$$ in the graph individually, if $$$v$$$ is adjacent to $$$u$$$, remove the edge between $$$u$$$ and $$$v$$$, otherwise add an edge between $$$u$$$ and $$$v$$$. Find the minimum number of operations required to make the graph connected. Also, find any sequence of operations with the minimum length that makes the graph connected.",
  "inputFormat": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1\\leq t\\leq 800$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$2\\leq n\\leq 4000$$$) — the number of vertices in the graph. Then $$$n$$$ lines follow. The $$$i$$$-th row contains a binary string $$$s_i$$$ of length $$$n$$$, where $$$s_{i,j}$$$ is ' 1 ' if there is an edge between vertex $$$i$$$ and $$$j$$$ initially, otherwise $$$s_{i,j}$$$ is ' 0 '. It is guaranteed that $$$s_{i,i}$$$ is always ' 0 ' and $$$s_{i,j}=s_{j,i}$$$ for $$$1\\leq i,j\\leq n$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$4000$$$.",
  "outputFormat": "For each test case, in the first line, output an integer $$$m$$$ — the minimum number of operations required. If $$$m$$$ is greater than zero, then print an extra line consisting of $$$m$$$ integers — the vertices chosen in the operations in your solution. If there are multiple solutions with the minimum number of operations, print any.",
  "sampleTests": [
    {
      "input": "4\n3\n011\n100\n100\n3\n000\n001\n010\n4\n0100\n1000\n0001\n0010\n6\n001100\n000011\n100100\n101000\n010001\n010010",
      "output": "0\n1\n1\n2\n3 4 \n3\n2 5 6"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 512,
  "sourceUrl": "https://codeforces.com/problemset/problem/1761/E",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}