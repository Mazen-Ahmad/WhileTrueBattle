{
  "contestId": 2011,
  "index": "F",
  "name": "Good Subarray",
  "rating": null,
  "tags": [
    "implementation"
  ],
  "statement": "You are given an integer array $$$a$$$ of size $$$n$$$. Let's call an array good if it can be obtained using the following algorithm: create an array consisting of any single integer; and then perform the following operation an arbitrary number of times: choose an element from the already existing array (let's call it $$$x$$$) and add $$$x$$$, $$$(x-1)$$$, or $$$(x+1)$$$ to the end of the array. For example, the arrays $$$[1, 2, 1]$$$, $$$[5]$$$ and $$$[3, 2, 1, 4]$$$ are good, while $$$[2, 4]$$$ and $$$[3, 1, 2]$$$ are not. Your task is to count the number of good contiguous subarrays of the array $$$a$$$. Two subarrays that have the same elements but are in different positions of the array $$$a$$$ are considered different.",
  "inputFormat": "The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$). The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$ 1 \\le a_i \\le n)$$$. Additional constraint on the input: the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.",
  "outputFormat": "For each test case, print a single integer — the number of good contiguous subarrays of the array $$$a$$$.",
  "sampleTests": [
    {
      "input": "4\n3\n1 1 3\n4\n3 2 3 1\n1\n1\n8\n4 5 6 5 3 2 3 1",
      "output": "4\n9\n1\n23"
    }
  ],
  "timeLimit": 3000,
  "memoryLimit": 512,
  "sourceUrl": "https://codeforces.com/problemset/problem/2011/F",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}