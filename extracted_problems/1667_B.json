{
  "contestId": 1667,
  "index": "B",
  "name": "Optimal Partition",
  "rating": 2100,
  "tags": [
    "implementation"
  ],
  "statement": "You are given an array $$$a$$$ consisting of $$$n$$$ integers. You should divide $$$a$$$ into continuous non-empty subarrays (there are $$$2^{n-1}$$$ ways to do that). Let $$$s=a_l+a_{l+1}+\\ldots+a_r$$$. The value of a subarray $$$a_l, a_{l+1}, \\ldots, a_r$$$ is: $$$(r-l+1)$$$ if $$$s>0$$$, $$$0$$$ if $$$s=0$$$, $$$-(r-l+1)$$$ if $$$s<0$$$. What is the maximum sum of values you can get with a partition?",
  "inputFormat": "The input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 5 \\cdot 10^5$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 5 \\cdot 10^5$$$). The second line of each test case contains $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$ ($$$-10^9 \\le a_i \\le 10^9$$$). It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5 \\cdot 10^5$$$.",
  "outputFormat": "For each test case print a single integer — the maximum sum of values you can get with an optimal parition.",
  "sampleTests": [
    {
      "input": "5\n3\n1 2 -3\n4\n0 -2 3 -4\n5\n-1 -2 3 -1 -1\n6\n-1 2 -3 4 -5 6\n7\n1 -1 -1 1 -1 -1 1",
      "output": "1\n2\n1\n6\n-1"
    }
  ],
  "timeLimit": 4000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1667/B",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}