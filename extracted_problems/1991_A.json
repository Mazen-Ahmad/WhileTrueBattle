{
  "contestId": 1991,
  "index": "A",
  "name": "Maximize the Last Element",
  "rating": 800,
  "tags": [
    "implementation"
  ],
  "statement": "You are given an array $$$a$$$ of $$$n$$$ integers, where $$$n$$$ is odd . In one operation, you will remove two adjacent elements from the array $$$a$$$, and then concatenate the remaining parts of the array. For example, given the array $$$[4,7,4,2,9]$$$, we can obtain the arrays $$$[4,2,9]$$$ and $$$[4,7,9]$$$ by the operations $$$[\\underline{4,7}, 4,2,9] \\to [4,2,9]$$$ and $$$[4,7,\\underline{4,2},9] \\to [4,7,9]$$$ respectively. However, we cannot obtain the array $$$[7,2,9]$$$ as it requires deleting non-adjacent elements $$$[\\underline{4},7,\\underline{4},2,9]$$$. You will repeatedly perform this operation until exactly one element remains in $$$a$$$. Find the maximum possible value of the remaining element in $$$a$$$.",
  "inputFormat": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 99$$$; $$$n$$$ is odd) — the length of the array $$$a$$$. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 100$$$) — the elements of the array $$$a$$$. Note that there is no bound on the sum of $$$n$$$ over all test cases.",
  "outputFormat": "For each test case, output a single integer — the maximum possible value of the remaining element in $$$a$$$.",
  "sampleTests": [
    {
      "input": "4\n1\n6\n3\n1 3 2\n5\n4 7 4 2 9\n7\n3 1 4 1 5 9 2",
      "output": "6\n2\n9\n5"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1991/A",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}