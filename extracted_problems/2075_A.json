{
  "contestId": 2075,
  "index": "A",
  "name": "To Zero",
  "rating": 800,
  "tags": [
    "implementation"
  ],
  "statement": "You are given two integers $$$n$$$ and $$$k$$$; $$$k$$$ is an odd number not less than $$$3$$$. Your task is to turn $$$n$$$ into $$$0$$$. To do this, you can perform the following operation any number of times: choose a number $$$x$$$ from $$$1$$$ to $$$k$$$ and subtract it from $$$n$$$. However, if the current value of $$$n$$$ is even (divisible by $$$2$$$), then $$$x$$$ must also be even, and if the current value of $$$n$$$ is odd (not divisible by $$$2$$$), then $$$x$$$ must be odd. In different operations, you can choose the same values of $$$x$$$, but you don't have to. So, there are no limitations on using the same value of $$$x$$$. Calculate the minimum number of operations required to turn $$$n$$$ into $$$0$$$.",
  "inputFormat": "The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10000$$$) — the number of test cases. Each test case consists of one line containing two integers $$$n$$$ and $$$k$$$ ($$$3 \\le k \\le n \\le 10^9$$$, $$$k$$$ is odd).",
  "outputFormat": "For each test case, output one integer — the minimum number of operations required to turn $$$n$$$ into $$$0$$$.",
  "sampleTests": [
    {
      "input": "8\n39 7\n9 3\n6 3\n999967802 3\n5 5\n6 5\n999999999 3\n1000000000 3",
      "output": "7\n4\n3\n499983901\n1\n2\n499999999\n500000000"
    }
  ],
  "timeLimit": 2000,
  "memoryLimit": 512,
  "sourceUrl": "https://codeforces.com/problemset/problem/2075/A",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}