{
  "contestId": 1930,
  "index": "B",
  "name": "Permutation Printing",
  "rating": 1000,
  "tags": [
    "implementation"
  ],
  "statement": "You are given a positive integer $$$n$$$. Find a permutation$$$^\\dagger$$$ $$$p$$$ of length $$$n$$$ such that there do not exist two distinct indices $$$i$$$ and $$$j$$$ ($$$1 \\leq i, j < n$$$; $$$i \\neq j$$$) such that $$$p_i$$$ divides $$$p_j$$$ and $$$p_{i+1}$$$ divides $$$p_{j+1}$$$. Refer to the Notes section for some examples. Under the constraints of this problem, it can be proven that at least one $$$p$$$ exists. $$$^\\dagger$$$ A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).",
  "inputFormat": "Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^3$$$) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$3 \\leq n \\leq 10^5$$$) — the length of the permutation $$$p$$$. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.",
  "outputFormat": "For each test case, output $$$p_1, p_2, \\ldots, p_n$$$. If there are multiple solutions, you may output any one of them.",
  "sampleTests": [
    {
      "input": "2\n4\n3",
      "output": "4 1 2 3\n1 2 3"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1930/B",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}