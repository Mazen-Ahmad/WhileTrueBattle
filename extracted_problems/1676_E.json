{
  "contestId": 1676,
  "index": "E",
  "name": "Eating Queries",
  "rating": 1100,
  "tags": [
    "implementation"
  ],
  "statement": "Timur has $$$n$$$ candies. The $$$i$$$-th candy has a quantity of sugar equal to $$$a_i$$$. So, by eating the $$$i$$$-th candy, Timur consumes a quantity of sugar equal to $$$a_i$$$. Timur will ask you $$$q$$$ queries regarding his candies. For the $$$j$$$-th query you have to answer what is the minimum number of candies he needs to eat in order to reach a quantity of sugar greater than or equal to $$$x_j$$$ or print -1 if it's not possible to obtain such a quantity. In other words, you should print the minimum possible $$$k$$$ such that after eating $$$k$$$ candies, Timur consumes a quantity of sugar of at least $$$x_j$$$ or say that no possible $$$k$$$ exists. Note that he can't eat the same candy twice and queries are independent of each other (Timur can use the same candy in different queries).",
  "inputFormat": "The first line of input contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) — the number of test cases. The description of test cases follows. The first line contains $$$2$$$ integers $$$n$$$ and $$$q$$$ ($$$1 \\leq n, q \\leq 1.5\\cdot10^5$$$) — the number of candies Timur has and the number of queries you have to print an answer for respectively. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\leq a_i \\leq 10^4$$$) — the quantity of sugar in each of the candies respectively. Then $$$q$$$ lines follow. Each of the next $$$q$$$ lines contains a single integer $$$x_j$$$ ($$$1 \\leq x_j \\leq 2 \\cdot 10^9$$$) – the quantity Timur wants to reach for the given query. It is guaranteed that the sum of $$$n$$$ and the sum of $$$q$$$ over all test cases do not exceed $$$1.5 \\cdot 10^5$$$.",
  "outputFormat": "For each test case output $$$q$$$ lines. For the $$$j$$$-th line output the number of candies Timur needs to eat in order to reach a quantity of sugar greater than or equal to $$$x_j$$$ or print -1 if it's not possible to obtain such a quantity.",
  "sampleTests": [
    {
      "input": "3\n8 7\n4 3 3 1 1 4 5 9\n1\n10\n50\n14\n15\n22\n30\n4 1\n1 2 3 4\n3\n1 2\n5\n4\n6",
      "output": "1\n2\n-1\n2\n3\n4\n8\n1\n1\n-1"
    }
  ],
  "timeLimit": 3500,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1676/E",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}