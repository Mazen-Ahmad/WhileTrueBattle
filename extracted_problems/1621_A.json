{
  "contestId": 1621,
  "index": "A",
  "name": "Stable Arrangement of Rooks",
  "rating": 800,
  "tags": [
    "implementation"
  ],
  "statement": "You have an $$$n \\times n$$$ chessboard and $$$k$$$ rooks. Rows of this chessboard are numbered by integers from $$$1$$$ to $$$n$$$ from top to bottom and columns of this chessboard are numbered by integers from $$$1$$$ to $$$n$$$ from left to right. The cell $$$(x, y)$$$ is the cell on the intersection of row $$$x$$$ and collumn $$$y$$$ for $$$1 \\leq x \\leq n$$$ and $$$1 \\leq y \\leq n$$$. The arrangement of rooks on this board is called good , if no rook is beaten by another rook. A rook beats all the rooks that shares the same row or collumn with it. The good arrangement of rooks on this board is called not stable , if it is possible to move one rook to the adjacent cell so arrangement becomes not good. Otherwise, the good arrangement is stable . Here, adjacent cells are the cells that share a side . Such arrangement of $$$3$$$ rooks on the $$$4 \\times 4$$$ chessboard is good, but it is not stable: the rook from $$$(1, 1)$$$ can be moved to the adjacent cell $$$(2, 1)$$$ and rooks on cells $$$(2, 1)$$$ and $$$(2, 4)$$$ will beat each other. Please, find any stable arrangement of $$$k$$$ rooks on the $$$n \\times n$$$ chessboard or report that there is no such arrangement.",
  "inputFormat": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The first line of each test case contains two integers $$$n$$$, $$$k$$$ ($$$1 \\leq k \\leq n \\leq 40$$$) — the size of the chessboard and the number of rooks.",
  "outputFormat": "If there is a stable arrangement of $$$k$$$ rooks on the $$$n \\times n$$$ chessboard, output $$$n$$$ lines of symbols . and R . The $$$j$$$-th symbol of the $$$i$$$-th line should be equals R if and only if there is a rook on the cell $$$(i, j)$$$ in your arrangement. If there are multiple solutions, you may output any of them. If there is no stable arrangement, output $$$-1$$$.",
  "sampleTests": [
    {
      "input": "5\n3 2\n3 3\n1 1\n5 2\n40 33",
      "output": "..R\n...\nR..\n-1\nR\n.....\nR....\n.....\n....R\n.....\n-1"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1621/A",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}