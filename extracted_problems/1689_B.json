{
  "contestId": 1689,
  "index": "B",
  "name": "Mystic Permutation",
  "rating": 900,
  "tags": [
    "implementation"
  ],
  "statement": "Monocarp is a little boy who lives in Byteland and he loves programming. Recently, he found a permutation of length $$$n$$$. He has to come up with a mystic permutation. It has to be a new permutation such that it differs from the old one in each position. More formally, if the old permutation is $$$p_1,p_2,\\ldots,p_n$$$ and the new one is $$$q_1,q_2,\\ldots,q_n$$$ it must hold that $$$$$$p_1\\neq q_1, p_2\\neq q_2, \\ldots ,p_n\\neq q_n.$$$$$$ Monocarp is afraid of lexicographically large permutations. Can you please help him to find the lexicographically minimal mystic permutation?",
  "inputFormat": "There are several test cases in the input data. The first line contains a single integer $$$t$$$ ($$$1\\leq t\\leq 200$$$) — the number of test cases. This is followed by the test cases description. The first line of each test case contains a positive integer $$$n$$$ ($$$1\\leq n\\leq 1000$$$) — the length of the permutation. The second line of each test case contains $$$n$$$ distinct positive integers $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\leq p_i \\leq n$$$). It's guaranteed that $$$p$$$ is a permutation, i. e. $$$p_i \\neq p_j$$$ for all $$$i \\neq j$$$. It is guaranteed that the sum of $$$n$$$ does not exceed $$$1000$$$ over all test cases.",
  "outputFormat": "For each test case, output $$$n$$$ positive integers — the lexicographically minimal mystic permutations. If such a permutation does not exist, output $$$-1$$$ instead.",
  "sampleTests": [
    {
      "input": "4\n3\n1 2 3\n5\n2 3 4 5 1\n4\n2 3 1 4\n1\n1",
      "output": "2 3 1\n1 2 3 4 5\n1 2 4 3\n-1"
    }
  ],
  "timeLimit": 2000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1689/B",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}