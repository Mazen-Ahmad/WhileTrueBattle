{
  "contestId": 2045,
  "index": "G",
  "name": "X Aura",
  "rating": 2200,
  "tags": [
    "implementation"
  ],
  "statement": "Mount ICPC can be represented as a grid of $$$R$$$ rows (numbered from $$$1$$$ to $$$R$$$) and $$$C$$$ columns (numbered from $$$1$$$ to $$$C$$$). The cell located at row $$$r$$$ and column $$$c$$$ is denoted as $$$(r, c)$$$ and has a height of $$$H_{r, c}$$$. Two cells are adjacent to each other if they share a side. Formally, $$$(r, c)$$$ is adjacent to $$$(r-1, c)$$$, $$$(r+1, c)$$$, $$$(r, c-1)$$$, and $$$(r, c+1)$$$, if any exists. You can move only between adjacent cells, and each move comes with a penalty. With an aura of an odd positive integer $$$X$$$, moving from a cell with height $$$h_1$$$ to a cell with height $$$h_2$$$ gives you a penalty of $$$(h_1 - h_2)^X$$$. Note that the penalty can be negative. You want to answer $$$Q$$$ independent scenarios. In each scenario, you start at the starting cell $$$(R_s, C_s)$$$ and you want to go to the destination cell $$$(R_f, C_f)$$$ with minimum total penalty. In some scenarios, the total penalty might become arbitrarily small; such a scenario is called invalid . Find the minimum total penalty to move from the starting cell to the destination cell, or determine if the scenario is invalid.",
  "inputFormat": "The first line consists of three integers $$$R$$$ $$$C$$$ $$$X$$$ ($$$1 \\leq R, C \\leq 1000; 1 \\leq X \\leq 9; X$$$ is an odd integer). Each of the next $$$R$$$ lines consists of a string $$$H_r$$$ of length $$$C$$$. Each character in $$$H_r$$$ is a number from 0 to 9 . The $$$c$$$-th character of $$$H_r$$$ represents the height of cell $$$(r, c)$$$, or $$$H_{r, c}$$$. The next line consists of an integer $$$Q$$$ ($$$1 \\leq Q \\leq 100\\,000)$$$. Each of the next $$$Q$$$ lines consists of four integers $$$R_s$$$ $$$C_s$$$ $$$R_f$$$ $$$C_f$$$ ($$$1 \\leq R_s, R_f \\leq R; 1 \\leq C_s, C_f \\leq C$$$).",
  "outputFormat": "For each scenario, output the following in a single line. If the scenario is invalid, output INVALID . Otherwise, output a single integer representing the minimum total penalty to move from the starting cell to the destination cell.",
  "sampleTests": [
    {
      "input": "3 4 1\n3359\n4294\n3681\n5\n1 1 3 4\n3 3 2 1\n2 2 1 4\n1 3 3 2\n1 1 1 1",
      "output": "2\n4\n-7\n-1\n0"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 1024,
  "sourceUrl": "https://codeforces.com/problemset/problem/2045/G",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}