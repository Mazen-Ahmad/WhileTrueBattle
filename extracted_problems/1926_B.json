{
  "contestId": 1926,
  "index": "B",
  "name": "Vlad and Shapes",
  "rating": 800,
  "tags": [
    "implementation"
  ],
  "statement": "Vladislav has a binary square grid of $$$n \\times n$$$ cells. A triangle or a square is drawn on the grid with symbols $$$\\texttt{1}$$$. As he is too busy being cool, he asks you to tell him which shape is drawn on the grid. A triangle is a shape consisting of $$$k$$$ ($$$k>1$$$) consecutive rows, where the $$$i$$$-th row has $$$2 \\cdot i-1$$$ consecutive characters $$$\\texttt{1}$$$, and the central 1 s are located in one column. An upside down triangle is also considered a valid triangle (but not rotated by 90 degrees). Two left pictures contain examples of triangles: $$$k=4$$$, $$$k=3$$$. The two right pictures don't contain triangles. A square is a shape consisting of $$$k$$$ ($$$k>1$$$) consecutive rows, where the $$$i$$$-th row has $$$k$$$ consecutive characters $$$\\texttt{1}$$$, which are positioned at an equal distance from the left edge of the grid. Examples of two squares: $$$k=2$$$, $$$k=4$$$. For the given grid, determine the type of shape that is drawn on it.",
  "inputFormat": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 10$$$) — the size of the grid. The next $$$n$$$ lines each contain $$$n$$$ characters $$$\\texttt{0}$$$ or $$$\\texttt{1}$$$. The grid contains exactly one triangle or exactly one square that contains all the $$$\\texttt{1}$$$s in the grid. It is guaranteed that the size of the triangle or square is greater than $$$1$$$ (i.e., the shape cannot consist of exactly one 1 ).",
  "outputFormat": "For each test case, output \" SQUARE \" if all the $$$\\texttt{1}$$$s in the grid form a square, and \" TRIANGLE \" otherwise (without quotes).",
  "sampleTests": [
    {
      "input": "6\n3\n000\n011\n011\n4\n0000\n0000\n0100\n1110\n2\n11\n11\n5\n00111\n00010\n00000\n00000\n00000\n10\n0000000000\n0000000000\n0000000000\n0000000000\n0000000000\n1111111110\n0111111100\n0011111000\n0001110000\n0000100000\n3\n111\n111\n111",
      "output": "SQUARE\nTRIANGLE\nSQUARE\nTRIANGLE\nTRIANGLE\nSQUARE"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1926/B",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}