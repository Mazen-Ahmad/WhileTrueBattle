{
  "contestId": 2103,
  "index": "D",
  "name": "Local Construction",
  "rating": 2000,
  "tags": [
    "implementation"
  ],
  "statement": "An element $$$b_i$$$ ($$$1\\le i\\le m$$$) in an array $$$b_1, b_2, \\ldots, b_m$$$ is a local minimum if at least one of the following holds: $$$2\\le i\\le m - 1$$$ and $$$b_i < b_{i - 1}$$$ and $$$b_i < b_{i + 1}$$$, or $$$i = 1$$$ and $$$b_1 < b_2$$$, or $$$i = m$$$ and $$$b_m < b_{m - 1}$$$. Similarly, an element $$$b_i$$$ ($$$1\\le i\\le m$$$) in an array $$$b_1, b_2, \\ldots, b_m$$$ is a local maximum if at least one of the following holds: $$$2\\le i\\le m - 1$$$ and $$$b_i > b_{i - 1}$$$ and $$$b_i > b_{i + 1}$$$, or $$$i = 1$$$ and $$$b_1 > b_2$$$, or $$$i = m$$$ and $$$b_m > b_{m - 1}$$$. Note that local minima and maxima are not defined for arrays with only one element. There is a hidden permutation$$$^{\\text{∗}}$$$ $$$p$$$ of length $$$n$$$. The following two operations are applied to permutation $$$p$$$ alternately, starting from operation 1, until there is only one element left in $$$p$$$: Operation 1 — remove all elements of $$$p$$$ which are not local minima. Operation 2 — remove all elements of $$$p$$$ which are not local maxima. More specifically, operation 1 is applied during every odd iteration, and operation 2 is applied during every even iteration, until there is only one element left in $$$p$$$. For each index $$$i$$$ ($$$1\\le i\\le n$$$), let $$$a_i$$$ be the iteration number that element $$$p_i$$$ is removed, or $$$-1$$$ if it was never removed. It can be proven that there will be only one element left in $$$p$$$ after at most $$$\\lceil \\log_2 n\\rceil$$$ iterations (in other words, $$$a_i \\le \\lceil \\log_2 n\\rceil$$$). You are given the array $$$a_1, a_2, \\ldots, a_n$$$. Your task is to construct any permutation $$$p$$$ of $$$n$$$ elements that satisfies array $$$a$$$. $$$^{\\text{∗}}$$$A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).",
  "inputFormat": "Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). The description of the test cases follows. The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$) — the number of elements in permutation $$$p$$$. The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le \\lceil\\log_2 n\\rceil$$$ or $$$a_i = -1$$$) — the iteration number that element $$$p_i$$$ is removed. It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$. It is guaranteed that there exists at least one permutation $$$p$$$ that satisfies array $$$a$$$.",
  "outputFormat": "For each test case, output $$$n$$$ integers representing the elements of the permutation satisfying array $$$a$$$. If there are multiple solutions, you may output any of them.",
  "sampleTests": [
    {
      "input": "7\n3\n1 1 -1\n5\n1 -1 1 2 1\n8\n3 1 2 1 -1 1 1 2\n7\n1 1 1 -1 1 1 1\n5\n1 1 1 1 -1\n5\n-1 1 1 1 1\n5\n-1 1 2 1 2",
      "output": "3 2 1\n4 3 5 1 2\n6 7 2 4 3 8 5 1\n6 5 2 1 3 4 7\n5 4 3 2 1\n1 2 3 4 5\n4 5 2 3 1"
    }
  ],
  "timeLimit": 2000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/2103/D",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}