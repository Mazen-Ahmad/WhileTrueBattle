{
  "contestId": 1707,
  "index": "C",
  "name": "DFS Trees",
  "rating": 2400,
  "tags": [
    "implementation"
  ],
  "statement": "You are given a connected undirected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. The weight of the $$$i$$$-th edge is $$$i$$$. Here is a wrong algorithm of finding a minimum spanning tree (MST) of a graph: vis := an array of length n s := a set of edges function dfs(u): vis[u] := true iterate through each edge (u, v) in the order from smallest to largest edge weight if vis[v] = false add edge (u, v) into the set (s) dfs(v) function findMST(u): reset all elements of (vis) to false reset the edge set (s) to empty dfs(u) return the edge set (s) Each of the calls findMST(1) , findMST(2) , ..., findMST(n) gives you a spanning tree of the graph. Determine which of these trees are minimum spanning trees.",
  "inputFormat": "The first line of the input contains two integers $$$n$$$, $$$m$$$ ($$$2\\le n\\le 10^5$$$, $$$n-1\\le m\\le 2\\cdot 10^5$$$) â€” the number of vertices and the number of edges in the graph. Each of the following $$$m$$$ lines contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1\\le u_i, v_i\\le n$$$, $$$u_i\\ne v_i$$$), describing an undirected edge $$$(u_i,v_i)$$$ in the graph. The $$$i$$$-th edge in the input has weight $$$i$$$. It is guaranteed that the graph is connected and there is at most one edge between any pair of vertices.",
  "outputFormat": "You need to output a binary string $$$s$$$, where $$$s_i=1$$$ if findMST(i) creates an MST, and $$$s_i = 0$$$ otherwise.",
  "sampleTests": [
    {
      "input": "5 5\n1 2\n3 5\n1 3\n3 2\n4 2",
      "output": "01111"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1707/C",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}