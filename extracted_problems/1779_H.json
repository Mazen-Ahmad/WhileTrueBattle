{
  "contestId": 1779,
  "index": "H",
  "name": "Olympic Team Building",
  "rating": 3500,
  "tags": [
    "implementation"
  ],
  "statement": "Iron and Werewolf are participating in a chess Olympiad, so they want to practice team building. They gathered $$$n$$$ players, where $$$n$$$ is a power of $$$2$$$, and they will play sports. Iron and Werewolf are among those $$$n$$$ people. One of the sports is tug of war. For each $$$1\\leq i \\leq n$$$, the $$$i$$$-th player has strength $$$s_i$$$. Elimination rounds will be held until only one player remains — we call that player the absolute winner . In each round: Assume that $$$m>1$$$ players are still in the game, where $$$m$$$ is a power of $$$2$$$. The $$$m$$$ players are split into two teams of equal sizes (i. e., with $$$m/2$$$ players in each team). The strength of a team is the sum of the strengths of its players. If the teams have equal strengths, Iron chooses who wins; otherwise, the stronger team wins. Every player in the losing team is eliminated, so $$$m/2$$$ players remain. Iron already knows each player's strength and is wondering who can become the absolute winner and who can't if he may choose how the teams will be formed in each round, as well as the winning team in case of equal strengths .",
  "inputFormat": "The first line contains a single integer $$$n$$$ ($$$4 \\leq n \\leq 32$$$) — the number of players participating in tug of war. It is guaranteed that $$$n$$$ is a power of $$$2$$$. The second line consists of a sequence $$$s_1,s_2, \\ldots, s_n$$$ of integers ($$$1 \\leq s_i \\leq 10^{15}$$$) — the strengths of the players.",
  "outputFormat": "In a single line output a binary string $$$s$$$ of length $$$n$$$ — the $$$i$$$-th character of $$$s$$$ should be $$$1$$$ if the $$$i$$$-th player can become the absolute winner and it should be $$$0$$$ otherwise.",
  "sampleTests": [
    {
      "input": "4\n60 32 59 87",
      "output": "1001"
    }
  ],
  "timeLimit": 2000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1779/H",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}