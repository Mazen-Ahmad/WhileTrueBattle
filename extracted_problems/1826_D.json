{
  "contestId": 1826,
  "index": "D",
  "name": "Running Miles",
  "rating": 1700,
  "tags": [
    "implementation"
  ],
  "statement": "There is a street with $$$n$$$ sights, with sight number $$$i$$$ being $$$i$$$ miles from the beginning of the street. Sight number $$$i$$$ has beauty $$$b_i$$$. You want to start your morning jog $$$l$$$ miles and end it $$$r$$$ miles from the beginning of the street. By the time you run, you will see sights you run by (including sights at $$$l$$$ and $$$r$$$ miles from the start). You are interested in the $$$3$$$ most beautiful sights along your jog, but every mile you run, you get more and more tired. So choose $$$l$$$ and $$$r$$$, such that there are at least $$$3$$$ sights you run by, and the sum of beauties of the $$$3$$$ most beautiful sights minus the distance in miles you have to run is maximized. More formally, choose $$$l$$$ and $$$r$$$, such that $$$b_{i_1} + b_{i_2} + b_{i_3} - (r - l)$$$ is maximum possible, where $$$i_1, i_2, i_3$$$ are the indices of the three maximum elements in range $$$[l, r]$$$.",
  "inputFormat": "The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 10^5$$$) — the number of test cases. The first line of each test case contains a single integer $$$n$$$ ($$$3 \\leq n \\leq 10^5$$$). The second line of each test case contains $$$n$$$ integers $$$b_i$$$ ($$$1 \\leq b_i \\leq 10^8$$$) — beauties of sights $$$i$$$ miles from the beginning of the street. It's guaranteed that the sum of all $$$n$$$ does not exceed $$$10^5$$$.",
  "outputFormat": "For each test case output a single integer equal to the maximum value $$$b_{i_1} + b_{i_2} + b_{i_3} - (r - l)$$$ for some running range $$$[l, r]$$$.",
  "sampleTests": [
    {
      "input": "4\n5\n5 1 4 2 3\n4\n1 1 1 1\n6\n9 8 7 6 5 4\n7\n100000000 1 100000000 1 100000000 1 100000000",
      "output": "8\n1\n22\n299999996"
    }
  ],
  "timeLimit": 2000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1826/D",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}