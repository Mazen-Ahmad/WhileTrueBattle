{
  "contestId": 1758,
  "index": "A",
  "name": "SSeeeeiinngg DDoouubbllee",
  "rating": 800,
  "tags": [
    "implementation"
  ],
  "statement": "A palindrome is a string that reads the same backward as forward. For example, the strings $$$\\texttt{z}$$$, $$$\\texttt{aaa}$$$, $$$\\texttt{aba}$$$, and $$$\\texttt{abccba}$$$ are palindromes, but $$$\\texttt{codeforces}$$$ and $$$\\texttt{ab}$$$ are not. The double of a string $$$s$$$ is obtained by writing each character twice. For example, the double of $$$\\texttt{seeing}$$$ is $$$\\texttt{sseeeeiinngg}$$$. Given a string $$$s$$$, rearrange its double to form a palindrome. Output the rearranged string. It can be proven that such a rearrangement always exists.",
  "inputFormat": "The first line of input contains $$$t$$$ ($$$1 \\leq t \\leq 1000$$$) â€” the number of test cases. The only line of each test case contains a single string $$$s$$$ ($$$1 \\leq |s| \\leq 100$$$) consisting only of lowercase English letters. Note that the sum of $$$|s|$$$ over all test cases is not bounded.",
  "outputFormat": "For each test case, output a palindromic string of length $$$2 \\cdot |s|$$$ that is a rearrangement of the double of $$$s$$$.",
  "sampleTests": [
    {
      "input": "4\na\nsururu\nerrorgorn\nanutforajaroftuna",
      "output": "aa\nsuurruurruus\nrgnororerrerorongr\naannuuttffoorraajjaarrooffttuunnaa"
    }
  ],
  "timeLimit": 1000,
  "memoryLimit": 256,
  "sourceUrl": "https://codeforces.com/problemset/problem/1758/A",
  "verified": true,
  "qualityScore": 4.0,
  "source": "codeforces-scraped"
}